// NOTE: Since this is an example style guide, we have way more documentation
// for this component than usual. Normally, there'd be only one KSS doc block
// per component.


// Flower
//
// The Flower component is a responsive flower, with one variation
//
// - The “tulip” variant
//
// and the following states:
//
// - mobile (the default)
// - desktop (screen sizes larger than 60em)
// - hover/focus
// - is-pollinating (state triggered by JavaScript)
// - night-time skin (global state or “theme” in SMACSS)
//
// To view all of these state variations, the user will need to change the
// viewport width and hover/focus over the component.
//
// After looking at all the variants and states of the component, head over to
// the “Flower (deconstructed)” page to see the flower component’s parts
// (elements).
//
// Style guide: flower


// Flower (deconstructed)
//
// The flower component is constructed of several CSS elements. The component
// can also be applied to a variety of different collections of HTML; the markup
// below is just one example.
//
// Markup: flower-with-bed.hbs
//
// Style guide: flower-deconstructed


// Shared styling among the component parts.
%flower-base {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: image-url('flower.png') left top / cover no-repeat;
  content: '';
}

// Flower
//
// The default styling of the flower component with its default HTML elements.
//
// Markup: flower.hbs
//
// .flower--tulip       - The tulip **variant**. Just add this class to the same
//                        HTML element that has `.flower`.
// .flower--responsive  - The responsive variant includes a media query
//                        **state** to add “desktop” styling to the flower for
//                        large screens.
// .flower--print       - The print variant is a duplicate of the `@media print`
//                        **state**.
// :hover               - The hover **state** (same as the focus state.)
// .flower--tulip:hover - Tulip **variant** with hover/focus **state**.
// .is-pollinating      - A **state** triggered when JavaScript adds this class.
//
// Style guide: flower.base


// Flower (base element)
//
// The base class name for the component is `.flower`. To see the CSS that is
// applied to it, use your browser's DOM inspector.
//
// Note: there's not much CSS here since most styling is on the other elements
// of the flower component.
//
// Markup: element/flower-wrapper.hbs
//
// Style guide: flower-deconstructed.base

.flower,
%flower {
  @extend %flower-base;
  background-image: none;

// Flower petals
//
// The `.flower__petals` element.
//
// Markup: element/flower__petals.hbs
//
// .flower--tulip - The tulip variation causes the `.flower__petals` to display
//                  differently.
//
// Style guide: flower-deconstructed.petals

  &__petals {
    @extend %flower-base;
    background-image: image-url('flower__petals.png');

    .flower--tulip & {
      background-image: image-url('flower--tulip__petals.png');
    }
  }

// Flower face
//
// The `.flower__face` element.
//
// Markup: element/flower__face.hbs
//
// Style guide: flower-deconstructed.face

  &__face {
    @extend %flower-base;
    background-image: image-url('flower__face.png');

    .flower--tulip & {
      background-image: none;
    }
  }

// Flower stem
//
// The `.flower__stem` element.
//
// Markup: element/flower__stem.hbs
//
// Style guide: flower-deconstructed.stem

  &__stem::before {
    @extend %flower-base;
    background-image: image-url('flower__stem.png');
    z-index: -4;
  }

// Flower leaves
//
// The `.flower__leaves` element.
//
// Markup: element/flower__leaves.hbs
//
// Weight: 1
//
// Style guide: flower-deconstructed.leaves

  &__leaves {
    @extend %flower-base;
    background-image: image-url('flower__leaves.png');
    z-index: -5;
  }

// Flower (with bed)
//
// The styling of the flower component with an extra `.flower__bed` HTML element
// wrapping the component.
//
// Markup: flower-with-bed.hbs
//
// .flower--tulip - The tulip variant.
//
// Style guide: flower.bed


// Flower bed
//
// The `.flower__bed` element.
//
// Markup: element/flower__bed.hbs
//
// Weight: 2
//
// Style guide: flower-deconstructed.bed

  &__bed {
    @extend %flower-base;
    background-image: none;

    &::before,
    &::after {
      @extend %flower-base;
      // Allow the child .flower to receive hover/focus states.
      top: auto;
      bottom: 0;
      height: 30%;
      background-position: left bottom;
    }
    &::before {
      z-index: -10;
      background-image: image-url('flower__bed-back.png');
    }
    &::after {
      background-image: image-url('flower__bed.png');
    }
  }

  // Hover state.
  &::before {
    @extend %flower-base;
    background-image: image-url('flower-is-hover.png');
    background-position: -(566px/2) 0; // -50% does not work. :-\
    @include transition(background-position 1s);
  }
  &:hover::before,
  &:focus::before {
    background-position: 0 0;
    @include transition(background-position 1s);
  }

  &.is-pollinating::before {
    @extend %flower-base;
    background-image: image-url('flower-is-pollinating.png');
    z-index: 1;
  }

  // Media query state for desktop sized screens.
  &--responsive {
    @media all and (min-width: 60em) {
      // Show the desktop and vase image.
      background-image: image-url('flower-is-desktop.png');

      // The stem and leaves images are included with the vase and desktop.
      .flower__stem::before {
        background-image: none;
      }
      .flower__leaves {
        background-image: none;
      }
      // The flower bed is mobile only.
      &__bed::before,
      &__bed::after {
        display: none;
      }
    }
  }

  // Media query state for printing.
  @media print {
    background-image: image-url('flower-is-print.png');

    // The stem, leaves and petals images are included with component.
    .flower__stem::before {
      background-image: none;
    }
    * {
      background-image: none;
    }
  }
  &--print {
    background-image: image-url('flower-is-print.png');

    // The stem, leaves and petals images are included with component.
    .flower__stem::before {
      background-image: none;
    }
    * {
      background-image: none;
    }
  }

// Flower (at night)
//
// If you want to affect all/most components on a page, you can add a skin/theme
// class to the `body` or `html` elements so that a component can react to its
// parent's classes.
//
// In the night-time skin for the flower component, we add a `is-night` class
// to a parent HTML element of the component.
//
// Markup: flower-is-night.hbs
//
// Style guide: flower.skin-night

  .is-night & {
    background-image: image-url('flower-is-night.png');

    // The stem, leaves and petals images are included with component.
    .flower__stem::before {
      background-image: none;
    }
    * {
      background-image: none;
    }
  }
}
